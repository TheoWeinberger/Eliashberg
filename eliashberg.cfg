//Physical parameters for the tight binding model
tightBinding =
{
    t = 131.578947368; //t: the tight binding hopping matrix element in meV 
    ratioTight = 0.45; //ratioTight: the ratio of tight-binding hopping elements tPrime/t
    a = 1.0; //a: The side length of a square lattice unit cell
    doping = 1.1; //doping: The doping, calculated by Luttinger's theorem
    magModel = "AFM"; //magModel: Whether the FM or AFM model is being used, takes values FM or AFM
    phiModel = "p"; //phiModel: The model being used for the anomalous self energy, takes values s, p, d
}

//General physical parameters
phyParam =
{
    chi0 = 1.0; //chi0: the static susceptibility
    k0Squared = 12.0; //k0Squared: k0^2 where k0 is the inverse correlation length without strong magnetic correlations
    //tSF = ; //tSF: The characteristic spin fluctuation temperature. Tsf*kappa02 is approximately constant
}

//Parameters being sampled
sampleParam =
{
    gSquaredChi0tSample = [80.0, 81.0, 82.0]; //gSquaredchi0tSample: g^2 chi0/t, can be input as an array
    kSquaredSample = [1.0]; //k0Squared: k0^2 where k0 is the inverse correlation length without strong magnetic correlations
}

//Parameters which control system sampling
samplingControl =
{
    //t0 = ; //t0: Initial temperature for sampling
    n0 = 8; //n0: The initial number of positive fermion Matsubara frequencies within the cutoff
    //omegaC = ; //omegaC: The cutoff frequency, this should be around 20t but is equal to 2*pi*T0*N(T0)
    nK = 16; //nK: The number of k points along kx, defining the amount of k-point sampling note at this is a 2D system the total number of points goes as Nk^2
    
}

//Parameters which help convergence control
convControl =
{
    errSigma = 1e-5; //errSigma: The relative tolerance for the termination criteria for the convergence in calculating sigma
    errLambda = 1e-5 ; //errLambda: The relative tolerance for the termination criteria for the convergence in calculating lambda
    maxIter = 3000; //maxIter: The maximum number of iterations in finding self-consistent solutions at each temperature
    phiRatio = 1e8; //phiRatio: the ratio between scale of initial trial Phi and dPhi used in solving for lambda
    symm = true; //symm: whether sigma, the quasiparticle self energy, must be symmetrised
    maxMuIter = 1000; //maxMuIter: Max number of iterations when solving for mu
    numLambdaSeg = 1000000; //numLambdaSeg: The number of segments that the final lambda data and corresponding temperature data are interpolated to
    relaxation = [0.66, 0.2, 0.5, 1.0]; //relaxation: An array containing the mesh of the relaxation weight. This is scanned by the program in search of convergent solutions
}

//Control program output which determines what plots can be produced
output =
{
    plot = "g"; //plot: Whether we are plotting with respect to k or g2chi0t takes values of k or g
}